service:
  name: service-api-device

plugins:
  - serverless-bundle
  - serverless-pseudo-parameters

provider:
  name: aws
  runtime: nodejs12.x
  memorySize: 256
  region: sa-east-1
  environment:
    MONGODB_CONNECTION_STRING: ${self:custom.MongoDb.connectionString}
    MONGODB_DB_NAME: ${self:custom.MongoDb.dbName}
    API_BASE_URL: { "Fn::Join" : ["", [" https://", { "Ref" : "ApiGatewayRestApi" }, ".execute-api.${self:custom.region}.amazonaws.com/${self:custom.stage}" ] ]  }
  stage: ${opt:stage, 'dev'}
  
functions:
  newDevice:
    handler: src/handlers/device/newDevice.handler
    events:
      - http:
          method: POST
          path: /
          authorizer: ${self:custom.Authorizer}
          cors: true

  linkUserDevice:
    handler: src/handlers/device/linkUserDevice.handler
    events:
      - http:
          method: POST
          path: /link
          authorizer: ${self:custom.Authorizer}
          cors: true

  unlinkUserDevice:
    handler: src/handlers/device/unlinkUserDevice.handler
    events:
      - http:
          method: POST
          path: /unlink
          authorizer: ${self:custom.Authorizer}
          cors: true

  modifyDevice:
    handler: src/handlers/device/modifyDevice.handler
    events:
      - http:
          method: PATCH
          path: /
          authorizer: ${self:custom.Authorizer}
          cors: true

  getDevicesByEmail:
    handler: src/handlers/device/getDevicesByEmail.handler
    events:
      - http:
          method: GET
          path: /user/{email}
          authorizer: ${self:custom.Authorizer}
          cors: true

  getDevice:
    handler: src/handlers/device/getDevice.handler
    events:
      - http:
          method: GET
          path: /id/{comId}
          authorizer: ${self:custom.Authorizer}
          cors: true

  getPartition:
    handler: src/handlers/device/getPartition.handler
    events:
      - http:
          method: GET
          path: /partition/{comId}/{numero}
          authorizer: ${self:custom.Authorizer}
          cors: true

  newPartition:
    handler: src/handlers/device/newPartition.handler
    events:
      - http:
          method: POST
          path: /partition
          authorizer: ${self:custom.Authorizer}
          cors: true

  modifyPartition:
    handler: src/handlers/device/modifyPartition.handler
    events:
      - http:
          method: PATCH
          path: /partition
          authorizer: ${self:custom.Authorizer}
          cors: true
    
  deletePartition:
    handler: src/handlers/device/deletePartition.handler
    events:
      - http:
          method: DELETE
          path: /partition
          authorizer: ${self:custom.Authorizer}
          cors: true


  getZones:
    handler: src/handlers/device/getZones.handler
    events:
      - http:
          method: GET
          path: /zone/{comId}/{particion}
          authorizer: ${self:custom.Authorizer}
          cors: true

  newZone:
    handler: src/handlers/device/newZone.handler
    events:
      - http:
          method: POST
          path: /zone
          authorizer: ${self:custom.Authorizer}
          cors: true

  modifyZone:
    handler: src/handlers/device/modifyZone.handler
    events:
      - http:
          method: PATCH
          path: /zone
          authorizer: ${self:custom.Authorizer}
          cors: true
    
  deleteZone:
    handler: src/handlers/device/deleteZone.handler
    events:
      - http:
          method: DELETE
          path: /zone
          authorizer: ${self:custom.Authorizer}
          cors: true

  getNodes:
    handler: src/handlers/device/getNodes.handler
    events:
      - http:
          method: GET
          path: /node/{comId}/{particion}
          authorizer: ${self:custom.Authorizer}
          cors: true

  newNode:
    handler: src/handlers/device/newNode.handler
    events:
      - http:
          method: POST
          path: /node
          authorizer: ${self:custom.Authorizer}
          cors: true

  modifyNode:
    handler: src/handlers/device/modifyNode.handler
    events:
      - http:
          method: PATCH
          path: /node
          authorizer: ${self:custom.Authorizer}
          cors: true
    
  deleteNode:
    handler: src/handlers/device/deleteNode.handler
    events:
      - http:
          method: DELETE
          path: /node
          authorizer: ${self:custom.Authorizer}
          cors: true

  getAlarmUsers:
    handler: src/handlers/device/getAlarmUsers.handler
    events:
      - http:
          method: GET
          path: /alarm-user/{comId}/{particion}
          authorizer: ${self:custom.Authorizer}
          cors: true

  newAlarmUser:
    handler: src/handlers/device/newAlarmUser.handler
    events:
      - http:
          method: POST
          path: /alarm-user
          authorizer: ${self:custom.Authorizer}
          cors: true

  modifyAlarmUser:
    handler: src/handlers/device/modifyAlarmUser.handler
    events:
      - http:
          method: PATCH
          path: /alarm-user
          authorizer: ${self:custom.Authorizer}
          cors: true
    
  deleteAlarmUser:
    handler: src/handlers/device/deleteAlarmUser.handler
    events:
      - http:
          method: DELETE
          path: /alarm-user
          authorizer: ${self:custom.Authorizer}
          cors: true

  getAutomations:
    handler: src/handlers/device/getAutomations.handler
    events:
      - http:
          method: GET
          path: /automation/{comId}/{particion}
          authorizer: ${self:custom.Authorizer}
          cors: true

  newAutomation:
    handler: src/handlers/device/newAutomation.handler
    events:
      - http:
          method: POST
          path: /automation
          authorizer: ${self:custom.Authorizer}
          cors: true

  modifyAutomation:
    handler: src/handlers/device/modifyAutomation.handler
    events:
      - http:
          method: PATCH
          path: /automation
          authorizer: ${self:custom.Authorizer}
          cors: true
    
  deleteAutomation:
    handler: src/handlers/device/deleteAutomation.handler
    events:
      - http:
          method: DELETE
          path: /automation
          authorizer: ${self:custom.Authorizer}
          cors: true

resources:
  Resources:
    GatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: EXPIRED_TOKEN
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '401'
    AuthFailureGatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: UNAUTHORIZED
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '401' 

custom:
  MongoDb:
    connectionString: ${ssm:/db/atlas-connection-string~true}
    dbName: com38
  Authorizer: arn:aws:lambda:${self:provider.region}:${aws:accountId}:function:service-api-user-${self:provider.stage}-auth
  stage: ${opt:stage, self:provider.stage}
  region: ${opt:region, self:provider.region}
  bundle:
    linting: false